.#  codec_java.gsl
.#
.#  Generates a codec for a protocol specification
.#
.include "library.gsl"
.resolve_includes()
.global.ClassName = java_class_name(class.name)
.global.PackageName = java_package_name(switches.package)
.echo "Generating src/main/java/$(switches.package)/$(ClassName)Socket.java..."
.directory.create("src/main/java/$(switches.package)")
.output "src/main/java/$(switches.package)/$(ClassName)Socket.java"
/* ============================================================================
 * $(ClassName)Socket.java
 * 
 * Generated codec class for $(ClassName)Socket
 * ----------------------------------------------------------------------------
 * $(string.trim (class->license.):block                                      )
 * ============================================================================
 */
package $(PackageName);

import java.util.*;
import java.io.Closeable;
import java.nio.ByteBuffer;

import org.zeromq.api.*;
import org.zeromq.api.Message.Frame;
import org.zeromq.ZMQ;

/**
 * $(ClassName)Socket codec.
 * 
 * The specification for this class is as follows:
 * <pre class="text">
.for message
.    message.name = "$(message.name:c)"
.    for field where item() = 1
.        for class.header
.            for field as hfield
.              copy hfield before field
.            endfor
.        endfor
.    else
.        for class.header
.            for field as hfield
.              copy hfield to message
.            endfor
.        endfor
.    endfor
.
 *  $(NAME) - $(string.trim(.?''):left)
.    for field
.        if type = "number"
.            size ?= 8
 *    $(java_var_name(name))       $(type) $(size)
.            if size = 1
.                field.ctype = "int"
.            elsif size = 2
.                field.ctype = "int"
.            elsif size = 4
.                field.ctype = "long"
.            elsif size = 8
.                field.ctype = "long"
.            else
.                echo "E: bad size $(size) for $(java_var_name(name))"
.            endif
.        elsif type = "octets"
 *    $(java_var_name(name))       $(type) [$(size)]
.        else
 *    $(java_var_name(name))       $(type)
.        endif
.        field.name = "$(field.name:c)"
.        for class.field as cfield where cfield.name = field.name
.            if cfield.type <> field.type
.                echo "E: field '$(java_var_name(name))' must have same type everywhere"
.            endif
.        else
.            copy field to class
.        endfor
.    endfor
.endfor
 * </pre>
 * 
 * @author $(switches.author)
 */
public class $(ClassName)Socket implements Closeable {
    //  Protocol constants
.for define
    public static final int $(CLASS.NAME)_$(DEFINE.NAME:C)  = $(value);
.endfor

    //  Enumeration of message types
    public static enum MessageType {
.for message
.  if last()
        $(MESSAGE.NAME)
.  else
        $(MESSAGE.NAME),
.  endif
.endfor
    }
.for class.field where type = "octets"
    public static final int $(FIELD.NAME)_SIZE      = $(size);
.endfor

    //  Structure of our class
    private Socket socket;     //  Internal socket handle
    private Frame address;     //  Address of peer if any
    private ByteBuffer needle; //  Read/write pointer for serialization

.for class.message
    private $(java_class_name(message.name))Message $(java_var_name(message.name));
.endfor

    /**
     * Create a new $(ClassName)Socket.
     * 
     * @param socket The internal socket
     */
    public $(ClassName)Socket(Socket socket) {
        this.socket = socket;
    }

    /**
     * Destroy the $(ClassName)Socket.
     */
    @Override
    public void close() {
        socket.close();
    }

    //  --------------------------------------------------------------------------
    //  Network data encoding macros

    //  Put a 1-byte number to the frame
    protected final void putNumber1(int value) {
        needle.put((byte) value);
    }

    //  Get a 1-byte number from the frame
    //  then make it unsigned
    protected final int getNumber1() { 
        int value = needle.get(); 
        if (value < 0)
            value = (0xff) & value;
        return value;
    }

    //  Put a 2-byte number to the frame
    protected final void putNumber2(int value) {
        needle.putShort((short) value);
    }

    //  Get a 2-byte number from the frame
    protected final int getNumber2() { 
        int value = needle.getShort(); 
        if (value < 0)
            value = (0xffff) & value;
        return value;
    }

    //  Put a 4-byte number to the frame
    protected final void putNumber4(long value)  {
        needle.putInt((int) value);
    }

    //  Get a 4-byte number from the frame
    //  then make it unsigned
    protected final long getNumber4()  { 
        long value = needle.getInt(); 
        if (value < 0)
            value = (0xffffffff) & value;
        return value;
    }

    //  Put a 8-byte number to the frame
    protected final void putNumber8(long value)  {
        needle.putLong(value);
    }

    //  Get a 8-byte number from the frame
    protected final long getNumber8()  {
        return needle.getLong();
    }

    //  Put a block to the frame
    protected final void putBlock(byte[] value, int size)  {
        needle.put(value, 0, size);
    }

    //  Get a block from the frame
    protected final byte[] getBlock(int size)  {
        byte[] value = new byte[size]; 
        needle.get(value);

        return value;
    }

    //  Put a string to the frame
    protected final void putString(String value)  {
        needle.put((byte) value.length());
        needle.put(value.getBytes());
    }

    //  Get a string from the frame
    protected final String getString()  {
        int size = getNumber1();
        byte[] value = new byte[size];
        needle.get(value);

        return new String(value);
    }

    //  Put a dictionary to the frame
    protected final void writeDictionary(Map<String, String> dictionary) {
        putNumber1((byte) dictionary.size());
        for (Map.Entry<String, String> entry: dictionary.entrySet()) {
            putString(entry.getKey() + "=" + entry.getValue());
        }
    }

    //  Calculate the size of the dictionary in bytes
    protected final int countDictionary(Map<String, String> dictionary) {
        int nBytes = 0;
        for (Map.Entry<String, String> entry: dictionary.entrySet()) {
            nBytes += entry.getKey().length() + 1 + entry.getValue().length() + 1;
        }
        
        return nBytes;
    }

    /**
     * Get the message address.
     * 
     * @return The message address frame
     */
    public Frame getAddress() {
        return address;
    }

    /**
     * Set the message address.
     * 
     * @param address The new message address
     */
    public void setAddress(Frame address) {
        this.address = address;
    }

    /**
     * Receive a message on the socket.
     */
    public MessageType receive() {
        assert (socket != null);

        int id = 0;
        byte[] frame = null;
        try {
            //  Read valid message frame from socket; we loop over any
            //  garbage data we might receive from badly-connected peers
            while (true) {
                //  If we're reading from a ROUTER socket, get address
                if (socket.getZMQSocket().getType() == ZMQ.ROUTER) {
                    this.address = new Frame(socket.receive());
                    if (this.address == null)
                        return null;         //  Interrupted
                    if (!socket.hasMoreToReceive())
                        throw new IllegalArgumentException();
                }
                //  Read and parse command in frame
                frame = socket.receive();
                if (frame == null)
                    return null;             //  Interrupted

                //  Get and check protocol signature
                this.needle = ByteBuffer.wrap(frame); 
                int signature = getNumber2();
                if (signature ==(0xAAA0 | $(class.signature)))
                    break;                //  Valid signature

                //  Protocol assertion, drop message
                while (socket.hasMoreToReceive()) {
                    socket.receive();
                }
            }

            //  Get message id, which is first byte in frame
            id = getNumber1();

            switch (id) {
.for class.message
                case $(id):
                {
                    $(java_class_name(message.name))Message message = new $(java_class_name(message.name))Message();
                    this.$(java_var_name(message.name)) = message;
.    for field
.        if type = "number"
                    message.$(java_var_name(name)) = getNumber$(size)();
.                if defined(field.value)
                    if (message.$(java_var_name(name)) != $(field.value:))
                        throw new IllegalArgumentException();
.                endif
.        elsif type = "octets"
                    message.$(java_var_name(name)) = getBlock($(size));
.            if defined(field.value)
                    if (message.$(java_var_name(name)) != $(field.value:))
                        throw new IllegalArgumentException(); 
.            endif
.        elsif type = "string"
                    message.$(java_var_name(name)) = getString();
.            if defined(field.value)
                    if (!message.$(java_var_name(name)).equals( "$(field.value:)"))
                        throw new IllegalArgumentException();
.            endif
.        elsif type = "strings"
                    int $(java_var_name(name))ListSize = getNumber1();
                    message.$(java_var_name(name)) = new ArrayList<String>();
                    while ($(java_var_name(name))ListSize-- > 0) {
                        String string = getString();
                        message.$(java_var_name(name)).add(string);
                    }
.        elsif type = "dictionary"
                    int $(java_var_name(name))HashSize = getNumber1();
                    message.$(java_var_name(name)) = new HashMap<String, String>();
                    while ($(java_var_name(name))HashSize-- > 0) {
                        String string = getString();
                        String[] kv = string.split("=");
                        message.$(java_var_name(name)).put(kv[0], kv[1]);
                    }

.        elsif type = "frame"
                    //  Get next frame, leave current untouched
                    if (!socket.hasReceiveMore())
                        throw new IllegalArgumentException();
                    message.$(java_var_name(name)) = new Frame(socket.receive());
.        endif
.    endfor
                    break;
                }

.endfor
                default:
                    throw new IllegalArgumentException();
            }

            return MessageType.values()[id-1];
        } catch (Exception e) {
            //  Error returns
            System.out.printf("E: malformed message '%d'\\n", Integer.valueOf(id));
            return null;
        }
    }
.for message

    /**
     * Get a $(message.NAME) message from the socket.
     */
    public $(java_class_name(name))Message get$(java_class_name(name))() {
        if ($(java_var_name(message.name)) == null) {
            throw new IllegalStateException("E: message not available");
        }

        try {
            return $(java_var_name(message.name));
        } finally {
            $(java_var_name(message.name)) = null;
        }
    }
.endfor
.for message

    /**
     * Send the $(message.NAME) to the socket in one step.
     */
    public boolean send$(java_class_name(name))($(java_class_name(name))Message message) {
        //  Calculate size of serialized data
        int frameSize = 2 + 1;        //  Signature and message ID
.    for field
.        if type = "number"
        //  $(java_var_name(name)) is a $(size)-byte integer
        frameSize += $(size);
.        elsif type = "octets"
        //  $(java_var_name(name)) is a block of $(size) bytes
        frameSize += $(size);
.        elsif type = "string"
        //  $(java_var_name(name)) is a string with 1-byte length
.            if defined(field.value)
        frameSize += 1 + "$(field.value:)".length();
.            else
        frameSize++;        //  Size is one octet
        if (message.$(java_var_name(name)) != null)
            frameSize += message.$(java_var_name(name)).length();
.            endif
.        elsif type = "strings"
        //  $(java_var_name(name)) is an array of strings
        frameSize++;        //  Size is one octet
        if (message.$(java_var_name(name)) != null)
            for (String value : message.$(java_var_name(name))) 
                frameSize += 1 + value.length();
.        elsif type = "dictionary"
        //  $(java_var_name(name)) is an array of key=value strings
        frameSize++;        //  Size is one octet
        if (message.$(java_var_name(name)) != null)
            frameSize += countDictionary(message.$(java_var_name(name)));
.        endif
.    endfor

        //  Now serialize message into the frame
        byte[] frame = new byte[frameSize];
        needle = ByteBuffer.wrap(frame); 
        MessageFlag frameFlag = MessageFlag.NONE;
        putNumber2(0xAAA0 | $(class.signature));
        putNumber1((byte) $(id));     //  Message ID

.    for field
.        if type = "number"
.            if defined(field.value)
        putNumber$(size)($(field.value:));
.            else
        putNumber$(size)(message.$(java_var_name(name)));
.            endif
.        elsif type = "octets"
        putBlock(message.$(java_var_name(name)), $(size));
.        elsif type = "string"
.            if defined(field.value)
        putString("$(field.value:)");
.            else
        if (message.$(java_var_name(name)) != null)
            putString(message.$(java_var_name(name)));
        else
            putNumber1((byte) 0);     //  Empty string
.            endif
.        elsif type = "strings"
        if (message.$(java_var_name(name)) != null) {
            putNumber1((byte) message.$(java_var_name(name)).size());
            for (String value : message.$(java_var_name(name))) {
                putString(value);
            }
        }
        else
            putNumber1((byte) 0);     //  Empty string array
.        elsif type = "dictionary"
        if (message.$(java_var_name(name)) != null)
            writeDictionary(message.$(java_var_name(name)));
        else
            putNumber1((byte) 0);     //  Empty dictionary
.        elsif type = "frame"
        frameFlag = MessageFlag.SEND_MORE;
.        endif
.    endfor

        //  If we're sending to a ROUTER, we send the address first
        if (socket.getZMQSocket().getType() == ZMQ.ROUTER) {
            assert (address != null);
            if (!socket.send(address.getData(), MessageFlag.SEND_MORE)) {
                return false;
            }
        }

        //  Now send the data frame
        if (!socket.send(frame, frameFlag)) {
            return false;
        }

        //  Now send any frame fields, in order
.    for field where type = "frame"
        //  If $(java_var_name(name)) isn't set, send an empty frame
        if (message.$(field.name) == null)
            message.$(field.name) = new Frame("".getBytes());
.        if last()
        if (!socket.send(message.$(field.name).getData())) {
.        else
        if (!socket.send(message.$(field.name).getData(), MessageFlag.SEND_MORE)) {
.        endif
            return false;
        }
.    endfor

        return true;
    }
.endfor
}

.for message
.global.MessageName = java_class_name(message.name)
.echo "Generating src/main/java/$(switches.package)/$(MessageName)Message.java..."
.directory.create("src/main/java/$(switches.package)")
.output "src/main/java/$(switches.package)/$(MessageName)Message.java"
/* ============================================================================
 * $(MessageName)Message.java
 * 
 * Generated codec class for $(MessageName)Message
 * ----------------------------------------------------------------------------
 * $(string.trim (class->license.):block                                      )
 * ============================================================================
 */
package $(PackageName);

import java.util.*;

import org.zeromq.api.*;

/**
 * $(MessageName)Message codec.
 */
public class $(MessageName)Message {
    public static final $(ClassName)Socket.MessageType MESSAGE_TYPE = $(ClassName)Socket.MessageType.$(MESSAGE.NAME);

.for field where !defined(value)
.    if type = "number"
    protected $(ctype) $(java_var_name(name));
.    elsif type = "octets"
    protected byte[] $(java_var_name(name)) = new byte[$(size)];
.    elsif type = "number"
    protected long $(java_var_name(name));
.    elsif type = "string"
    protected String $(java_var_name(name));
.    elsif type = "strings"
    protected List<String> $(java_var_name(name));
.    elsif type = "dictionary"
    protected Map<String, String> $(java_var_name(name));
.    elsif type = "frame"
    protected Frame $(java_var_name(name));
.    endif
.endfor
.for field where !defined(value)
.    if type = "number"

    /**
     * Get the $(java_var_name(name)) field.
     * 
     * @return The $(java_var_name(name)) field
     */
    public $(ctype) get$(java_class_name(Name))() {
        return $(java_var_name(name));
    }

    /**
     * Set the $(java_var_name(name)) field.
     * 
     * @param $(java_var_name(name)) The $(java_var_name(name)) field
     */
    public void set$(java_class_name(Name))($(ctype) $(java_var_name(name))) {
        this.$(java_var_name(name)) = $(java_var_name(name));
    }
.    elsif type = "octets"

    /**
     * Get the $(java_var_name(name)) field.
     * 
     * @return The $(java_var_name(name)) field
     */
    public byte[] get$(java_class_name(Name))() {
        return $(java_var_name(name));
    }

    /**
     * Set the $(java_var_name(name)) field.
     * 
     * @param $(java_var_name(name)) The $(java_var_name(name)) field
     */
    public void set$(java_class_name(Name))(byte[] $(java_var_name(name))) {
        System.arraycopy($(java_var_name(name)), 0, this.$(java_var_name(name)), 0, $(size));
    }
.    elsif type = "string"

    /**
     * Get the $(java_var_name(name)) field.
     * 
     * @return The $(java_var_name(name)) field
     */
    public String get$(java_class_name(Name))() {
        return $(java_var_name(name));
    }

    /**
     * Set the $(java_var_name(name)) field.
     * 
     * @param $(java_var_name(name)) The $(java_var_name(name)) field
     */
    public void set$(java_class_name(Name))(String format, Object... args) {
        //  Format into newly allocated string
        $(java_var_name(name)) = String.format(format, args);
    }
.    elsif type = "strings"

    /**
     * Get the list of $(java_var_name(name)) strings.
     * 
     * @return The $(java_var_name(name)) strings
     */
    public List<String> get$(java_class_name(Name))() {
        return $(java_var_name(name));
    }

    /**
     * Iterate through the $(java_var_name(name)) field, and append a $(java_var_name(name)) value.
     * 
     * @param format The string format
     * @param args The arguments used to build the string
     */
    public void add$(stem_s(java_class_name(Name)))(String format, Object... args) {
        //  Format into newly allocated string
        String string = String.format(format, args);

        //  Attach string to list
        if ($(java_var_name(name)) == null)
            $(java_var_name(name)) = new ArrayList<String>();
        $(java_var_name(name)).add(string);
    }

    /**
     * Set the list of $(java_var_name(name)) strings.
     * 
     * @param value The collection of strings
     */
    public void set$(java_class_name(Name))(Collection<String> value) {
        $(java_var_name(name)) = new ArrayList<String>(value);
    }
.    elsif type = "dictionary"

    /**
     * Get the the $(java_var_name(name)) dictionary.
     * 
     * @return The $(java_var_name(name)) dictionary
     */
    public Map<String, String> get$(java_class_name(Name))() {
        return $(java_var_name(name));
    }

    /**
     * Get a value in the $(java_var_name(name)) dictionary as a string.
     * 
     * @param key The dictionary key
     * @param defaultValue The default value if the key does not exist
     */
    public String get$(stem_s(java_class_name(Name)))(String key, String defaultValue) {
        String value = null;
        if ($(java_var_name(name)) != null)
            value = $(java_var_name(name)).get(key);
        if (value == null)
            value = defaultValue;

        return value;
    }

    /**
     * Get a value in the $(java_var_name(name)) dictionary as a long.
     * 
     * @param key The dictionary key
     * @param defaultValue The default value if the key does not exist
     */
    public long get$(stem_s(java_class_name(Name)))(String key, long defaultValue) {
        long value = defaultValue;
        String string = null;
        if ($(java_var_name(name)) != null)
            string = $(java_var_name(name)).get(key);
        if (string != null)
            value = Long.parseLong(string);

        return value;
    }

    /**
     * Get a value in the $(java_var_name(name)) dictionary as a long.
     * 
     * @param key The dictionary key
     * @param defaultValue The default value if the key does not exist
     */
    public long get$(stem_s(java_class_name(Name)))(String key, int defaultValue) {
        int value = defaultValue;
        String string = null;
        if ($(java_var_name(name)) != null)
            string = $(java_var_name(name)).get(key);
        if (string != null)
            value = Integer.parseInt(string);

        return value;
    }

    /**
     * Set a value in the $(java_var_name(name)) dictionary.
     * 
     * @param key The dictionary key
     * @param format The string format
     * @param args The arguments used to build the string
     */
    public void put$(stem_s(java_class_name(Name)))(String key, String format, Object... args) {
        //  Format string into buffer
        String string = String.format(format, args);

        //  Store string in hash table
        if ($(java_var_name(name)) == null)
            $(java_var_name(name)) = new HashMap<String, String>();
        $(java_var_name(name)).put(key, string);
    }

    /**
     * Set a value in the $(java_var_name(name)) dictionary.
     * 
     * @param key The dictionary key
     * @param value The value
     */
    public void put$(stem_s(java_class_name(Name)))(String key, int value) {
        //  Store string in hash table
        if ($(java_var_name(name)) == null)
            $(java_var_name(name)) = new HashMap<String, String>();
        $(java_var_name(name)).put(key, String.valueOf(value));
    }

    /**
     * Set a value in the $(java_var_name(name)) dictionary.
     * 
     * @param key The dictionary key
     * @param value The value
     */
    public void put$(stem_s(java_class_name(Name)))(String key, long value) {
        //  Store string in hash table
        if ($(java_var_name(name)) == null)
            $(java_var_name(name)) = new HashMap<String, String>();
        $(java_var_name(name)).put(key, String.valueOf(value));
    }

    /**
     * Set the $(java_var_name(name)) dictionary.
     * 
     * @param value The new $(java_var_name(name)) dictionary
     */
    public void set$(java_class_name(Name))(Map<String, String> value) {
        if (value != null)
            $(java_var_name(name)) = new HashMap<String, String>(value); 
        else
            $(java_var_name(name)) = value;
    }
.    elsif type = "frame"

    /**
     * Get the $(java_var_name(name)) field.
     * 
     * @return The $(java_var_name(name)) field
     */
    public Frame get$(java_class_name(Name))() {
        return $(java_var_name(name));
    }

    /**
     * Set the $(java_var_name(name)) field, and takes ownership of supplied frame.
     * 
     * @param frame The new $(java_var_name(name)) frame
     */
    public void set$(java_class_name(Name))(Frame frame) {
        if ($(java_var_name(name)) != null)
            $(java_var_name(name)).destroy();
        $(java_var_name(name)) = frame;
    }
.    endif
.endfor
}
.endfor

.echo "Generating src/test/java/$(switches.package)/Test$(ClassName).java..."
.directory.create("src/test/java/$(switches.package)")
.output "src/test/java/$(switches.package)/$(ClassName)SocketTest.java"
package $(PackageName);

import static org.junit.Assert.*;

import org.junit.*;
import org.zeromq.api.*;
import org.zeromq.jzmq.*;

/**
 * Test $(ClassName)Socket.
 */
public class $(ClassName)SocketTest {
    private Context context;
    private Socket dealer;
    private Socket router;
    
    @Before
    public void setUp() {
        context = new ManagedContext();
        dealer = context.buildSocket(SocketType.DEALER)
            .bind("inproc://selftest");
        router = context.buildSocket(SocketType.ROUTER)
            .connect("inproc://selftest");
    }
.for class.message

    @Test
    public void test$(java_class_name(message.name))() {
        $(ClassName)Socket out = new $(ClassName)Socket(dealer);
        $(ClassName)Socket in = new $(ClassName)Socket(router);
        
        $(java_class_name(message.name))Message message = new $(java_class_name(message.name))Message();
.    for field where !defined(value)
.        if type = "number"
        message.set$(java_class_name(name))((byte) 123);
.        elsif type = "octets"
        byte[] $(java_var_name(name))Data = new byte[$(ClassName)Socket.$(FIELD.NAME)_SIZE];
        for (int i=0; i < $(ClassName)Socket.$(FIELD.NAME)_SIZE; i++)
            $(java_var_name(name))Data[i] = 123;
        message.set$(java_class_name(name))($(name)Data);
.        elsif type = "string"
        message.set$(java_class_name(name))("Life is short but Now lasts for ever");
.        elsif type = "strings"
        message.add$(stem_s(java_class_name(name)))("Name: %s", "Brutus");
        message.add$(stem_s(java_class_name(name)))("Age: %d", Integer.valueOf(43));
.        elsif type = "dictionary"
        message.put$(stem_s(java_class_name(name)))("Name", "Brutus");
        message.put$(stem_s(java_class_name(name)))("Age", "%d", Integer.valueOf(43));
.        elsif type = "frame"
        message.set$(java_class_name(name))(new Frame("Captcha Diem"));
.        endif
.    endfor
        
        assertTrue(out.send$(java_class_name(message.name))(message));
        assertEquals($(ClassName)Socket.MessageType.$(MESSAGE.NAME), in.receive());
        message = in.get$(java_class_name(message.name))();
.    for field where !defined(value)
.        if type = "number"
        assertEquals(message.get$(java_class_name(name))(), 123);
.        elsif type = "octets"
        assertEquals(message.get$(java_class_name(name))()[0], 123);
        assertEquals(message.$(name)()[$(ClassName)Socket.$(FIELD.NAME)_SIZE - 1], 123);
.        elsif type = "string"
        assertEquals(message.get$(java_class_name(name))(), "Life is short but Now lasts for ever");
.        elsif type = "strings"
        assertEquals(message.get$(java_class_name(name))().size(), 2);
        assertEquals(message.get$(java_class_name(name))().get(0), "Name: Brutus");
        assertEquals(message.get$(java_class_name(name))().get(1), "Age: 43");
.        elsif type = "dictionary"
        assertEquals(message.get$(java_class_name(name))().size(), 2);
        assertEquals(message.get$(stem_s(java_class_name(name)))("Name", "?"), "Brutus");
        assertEquals(message.get$(stem_s(java_class_name(name)))("Age", 0), 43);
.        elsif type = "frame"
        assertTrue(message.get$(java_class_name(name))().getString().equals("Captcha Diem"));
.        endif
.    endfor
        
        out.close();
        in.close();
    }
.endfor
}